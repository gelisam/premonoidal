-- Another approach to free symmetric premonoidal categories.
-- This time each 'Q' input is tied to a previous 'Q' output, a description
-- which remains more stable when two 'Free's are composed.
module Category.Premonoidal.Symmetric.Free2 where

open import Data.Nat
open import Data.List


-- Select one element of a list.
data Elem {X : Set} (x : X) : List X â†’ Set where
  Here
    : âˆ€ {xs}
    â†’ Elem x (x âˆ· xs)
  There
    : âˆ€ {xâ‚€ xs}
    â†’ Elem x xs
    â†’ Elem x (xâ‚€ âˆ· xs)

-- Replace the selected element with another value.
setElem
  : âˆ€ {X x xs}
  â†’ Elem x xs
  â†’ X
  â†’ List X
setElem {xs = xs} Here x'
  = x' âˆ· xs
setElem {xs = xs} (There {xâ‚€} i) x'
  = xâ‚€ âˆ· setElem i x'

module _ (X : Set) where
  -- We want to use each variable exactly once. The metaphor we use is that each
  -- variable is a port, and we can only plug one wire into each port.

  -- Tracks which ports are still available, and which ones are "locked",
  -- meaning that a wire has already been plugged into that port. Could
  -- represent the list of outputs of a 'Q', or 'Free''s original list of
  -- inputs, before any 'Q' has been applied.
  data PortList : Set where
    []
      : PortList
    _âˆ·_
      : X â†’ PortList â†’ PortList
    ðŸ”’âˆ·_
      : PortList â†’ PortList
  
  -- A 'PortList' where all the ports are unlocked.
  toPortList
    : List X
    â†’ PortList
  toPortList []
    = []
  toPortList (x âˆ· xs)
    = x âˆ· toPortList xs
  
  -- Like 'Elem', but only an unlocked port can be selected.
  data PortElem (x : X) : PortList â†’ Set where
    Here
      : âˆ€ {xs}
      â†’ PortElem x (x âˆ· xs)
    ðŸ”“There
      : âˆ€ {xâ‚€ xs}
      â†’ PortElem x xs
      â†’ PortElem x (xâ‚€ âˆ· xs)
    ðŸ”’There
      : âˆ€ {xs}
      â†’ PortElem x xs
      â†’ PortElem x (ðŸ”’âˆ· xs)

  -- Replace the selected port with a 'ðŸ”’'.
  lockPortElem
    : âˆ€ {x xs}
    â†’ PortElem x xs
    â†’ PortList
  lockPortElem Here
    = ðŸ”’âˆ· []
  lockPortElem (ðŸ”“There {xâ‚€} i)
    = xâ‚€ âˆ· lockPortElem i
  lockPortElem (ðŸ”’There {xs} i)
    = ðŸ”’âˆ· xs

  -- Tracks all the ports, starting with 'Free''s original list of inputs,
  -- followed by the outputs of every 'Q' applied so far, in order.
  OpenPorts : Set
  OpenPorts = List PortList

  -- Replace the selected port with a 'ðŸ”’'.
  lockOpenPortsElem
    : {x : X}
    â†’ {xs : PortList}
    â†’ {xss : List PortList}
    â†’ Elem xs xss
    â†’ PortElem x xs
    â†’ OpenPorts
  lockOpenPortsElem i j
    = setElem i (lockPortElem j)

  -- Attach a number of wires to a number of open ports, resulting in a smaller
  -- number of ports remaining open. Used to select the inputs of a 'Q'.
  data AttachPorts (xss : OpenPorts) : List X â†’ OpenPorts â†’ Set where
    Nil
      : AttachPorts xss [] xss
    Cons
      : âˆ€ {px xs pxs xss'}
      â†’ (i : Elem xs xss)
      â†’ (j : PortElem px xs)
      â†’ AttachPorts (lockOpenPortsElem i j) pxs xss'
      â†’ AttachPorts xss (px âˆ· pxs) xss'

  module _ (Q : List X â†’ List X â†’ Set) where
    -- A variant of 'Free' which tracks the ports which are still available at
    -- the beginning of the computation, and the wires which are still
    -- unconnected at the end of the computation.
    data FreePort (xss : OpenPorts) : List X â†’ Set where
      Nil
        : âˆ€ {pxs xss'}
        â†’ AttachPorts xss pxs []
        â†’ FreePort xss pxs
      Cons
        : âˆ€ {pxs xss' ys zs}
        â†’ AttachPorts xss pxs xss'
        â†’ Q pxs ys
        â†’ FreePort (xss' ++ [ toPortList ys ]) zs
        â†’ FreePort xss zs

    -- This module's main export: a free symmetric premonoidal category, indexed
    -- by the list of wires coming in and the list of wires coming out.
    data Free (xs : List X) (ys : List X) : Set where
      MkFree
        : FreePort [ toPortList xs ] ys
        â†’ Free xs ys